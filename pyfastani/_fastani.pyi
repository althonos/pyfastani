import typing
from typing import Generic, List, Union, Iterable, TypeVar

N = TypeVar("N")
Seq = Union[str, bytes, bytearray, memoryview]

MAX_KMER_SIZE: int

class _Parameterized:
    @property
    def k(self) -> int: ...
    @property
    def window_size(self) -> int: ...
    @property
    def fragment_length(self) -> int: ...
    @property
    def minimum_fraction(self) -> float: ...
    @property
    def percentage_identity(self) -> float: ...
    @property
    def p_value(self) -> float: ...


class Sketch(Generic[N], _Parameterized):
    def __init__(
        self,
        *,
        k: int = 16,
        fragment_length: int = 3000,
        minimum_fraction: float = 0.2,
        p_value: float = 1e-03,
        percentage_identity: float = 80.0,
        reference_size: int = 5_000_000,
    ) -> None: ...
    @property
    def occurences_threshold(self) -> int: ...
    @property
    def names(self) -> List[N]: ...
    def add_draft(self, name: N, contigs: Iterable[Seq]) -> Sketch[N]: ...
    def add_genome(self, name: N, sequence: Seq) -> Sketch[N]: ...
    def clear(self) -> Sketch[N]: ...


class Mapper(Generic[N], _Parameterized):
    def query_draft(self, contigs: Iterable[Seq]) -> List[Hit[N]]: ...
    def query_genome(self, sequence: Seq) -> List[Hit[N]]: ...


class Hit(Generic[N]):
    def __init__(self, name: N, identity: float, matches: int, fragments: int): ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    @property
    def name(self) -> N: ...
    @property
    def matches(self) -> int: ...
    @property
    def fragments(self) -> int: ...
    @property
    def identity(self) -> float: ...
